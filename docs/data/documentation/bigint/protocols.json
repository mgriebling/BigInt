{"abstract":[{"text":"BigInt supports the standard integer data type’s SignedInteger, BinaryInteger, Codable, and Numeric protocols.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/bigint.BigInt\/documentation\/BigInt"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms"],"anchor":"Articles","title":"Articles","generated":true}],"primaryContentSections":[{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"BigInt (with protocols) now includes support for StaticBigInt number initialization","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with macOS 13.3+, iOS 16.4+, tvOS 16.4+, watchOS 9.4+, macCatalyst 13.0+."},{"text":" ","type":"text"},{"text":"Note: These extensions required renaming ","type":"text"},{"type":"codeVoice","code":"magnitude"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"_magnitude"},{"type":"text","text":" to avoid conflict with the"},{"type":"text","text":" "},{"text":"Numeric protocol variable also called ","type":"text"},{"code":"magnitude","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Why support protocols? By supporting them you gain the ability to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"formulate generic algorithms and make use of algorithms from others"},{"type":"text","text":" "},{"type":"text","text":"that use the protocol type(s) you support. For example, "},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":" "},{"text":"compliance is free (with ","type":"text"},{"code":"BinaryInteger","type":"codeVoice"},{"type":"text","text":") and lets you do things like"}]},{"syntax":"swift","code":["for i in BInt(1)...10 {","   print(i.words)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The BigInt struct also"},{"text":" ","type":"text"},{"text":"includes ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" compliance conformity (for free). Codable","type":"text"},{"type":"text","text":" "},{"text":"compliance allows BInts to be distributed\/received or stored\/read as","type":"text"},{"text":" ","type":"text"},{"text":"industry-standard JSONs.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Protocols mean you can support generic arguments:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(e.g., "},{"type":"codeVoice","code":"func * <T:BinaryInteger>(_ lhs: Self, rhs: T) -> Self"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"which works with ","type":"text"},{"inlineContent":[{"text":"all","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"code":"BinaryIntegers","type":"codeVoice"},{"text":", including BigInt’s instead of","type":"text"},{"type":"text","text":" "},{"text":"just Ints or a single integer type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, with support for StaticBigInt, initialization can now"},{"text":" ","type":"text"},{"type":"text","text":"use unlimited precision instead of requiring quoted numbers:"}]},{"syntax":"swift","type":"codeListing","code":["let huge = BInt(12_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789)","let hugeHex = BInt(0x1234_5678_9ABC_DEF0_1234_5678_9ABC_DEF0_1234_5678_9ABC_DEF0_1234_5678_9ABC_DEF0)","let hugeOctal = BInt(0o123_456_701_123_456_701_123_456_701_123_456_701_123_456_701_123_456_701)","let hugeBinary = BInt(0b10010101_01010101_01010101_01010010_10101000_01010111_11100101_01010101_01001010_10101010)","print(huge, \"0x\"+hugeHex.asString(radix: 16, uppercase: true), \"0o\"+hugeOctal.asString(radix: 8), ","        \"0b\"+hugeBinary.asString(radix: 2))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"produces:"}]},{"code":["12345678901234567890123456789012345678901234567890123456789 ","0x123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0 ","0o123456701123456701123456701123456701123456701123456701 ","0b10010101010101010101010101010010101010000101011111100101010101010100101010101010"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"Finally, protocol support allows simplified extensions to the BigDecimal","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"package available "},{"type":"reference","identifier":"https:\/\/github.com\/mgriebling\/BigDecimal.git","isActive":true},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"It contains a complete arbitrary-precision Decimal number implementation"},{"text":" ","type":"text"},{"type":"text","text":"with support for standard 32-, 64-, and 128-bit decimal number formats."}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bigint\/protocols"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols"},"sections":[],"metadata":{"title":"Protocols and Additions","roleHeading":"Article","role":"article","modules":[{"name":"BigInt"}]},"references":{"doc://bigint.BigInt/documentation/BigInt":{"title":"BigInt","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt","url":"\/documentation\/bigint","type":"topic","kind":"symbol","abstract":[{"text":"Signed integers and fractions of unbounded size","type":"text"}],"role":"collection"},"doc://bigint.BigInt/documentation/BigInt/AboutBFraction":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Signed fractions with numerator and denominator of unbounded size"}],"url":"\/documentation\/bigint\/aboutbfraction","title":"About BFraction","kind":"article","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction"},"doc://bigint.BigInt/documentation/BigInt/AboutBInt":{"abstract":[{"type":"text","text":"Signed integers of unbounded size"}],"type":"topic","kind":"article","url":"\/documentation\/bigint\/aboutbint","role":"article","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","title":"About BInt"},"doc://bigint.BigInt/documentation/BigInt/Algorithms":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Some of the algorithms used in BigInt are described below"}],"url":"\/documentation\/bigint\/algorithms","title":"Algorithms","kind":"article","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms"},"https://github.com/mgriebling/BigDecimal.git":{"type":"link","titleInlineContent":[{"type":"text","text":"here"}],"identifier":"https:\/\/github.com\/mgriebling\/BigDecimal.git","title":"here","url":"https:\/\/github.com\/mgriebling\/BigDecimal.git"},"doc://bigint.BigInt/documentation/BigInt/Performance":{"role":"article","title":"Performance","kind":"article","type":"topic","abstract":[{"type":"text","text":"Execution times for certain BigInt operations"}],"url":"\/documentation\/bigint\/performance","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance"},"doc://bigint.BigInt/documentation/BigInt/AboutCRT":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","kind":"article","abstract":[{"type":"text","text":"Chinese Remainder Theorem"}],"title":"About CRT","url":"\/documentation\/bigint\/aboutcrt","role":"article","type":"topic"},"doc://bigint.BigInt/documentation/BigInt/References":{"title":"References","type":"topic","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"url":"\/documentation\/bigint\/references","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","role":"article","kind":"article"}}}