{"kind":"article","hierarchy":{"paths":[["doc:\/\/bigint.BigInt\/documentation\/BigInt"]]},"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols"],"anchor":"Articles"}],"variants":[{"paths":["\/documentation\/bigint\/aboutbint"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"abstract":[{"type":"text","text":"Signed integers of unbounded size"}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"BigInt"}],"title":"About BInt"},"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/BInt"},{"type":"text","text":" values are represented with magnitude and sign:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The magnitude is an array of unsigned 64-bit integers (a.k.a. Limbs)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The sign is a boolean value, "},{"type":"codeVoice","code":"true"},{"type":"text","text":" means value < 0, "},{"code":"false","type":"codeVoice"},{"type":"text","text":" means value >= 0"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The representation is little-endian, least significant Limb has index 0"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The representation is minimal, there is no leading zero Limbs. The exception is","type":"text"},{"type":"text","text":" "},{"text":"that the value 0 is represented as a single 64-bit zero Limb and a ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" sign.","type":"text"}]}]}]},{"anchor":"Creating-BInts","text":"Creating BInt’s","level":3,"type":"heading"},{"type":"codeListing","code":["\/\/ From an integer (unlimited size)","let a = BInt(27)","let z = BInt(12_345_678_901_234_567_890_123_456_789_012_345_678_901_234_567_890_123_456_789)","let y = BInt(0x1234_5678_9ABC_DEF0_1234_5678_9ABC_DEF0_1234_5678_9ABC_DEF0_1234_5678_9ABC_DEF0)","let v = BInt(0o123_456_701_123_456_701_123_456_701_123_456_701_123_456_701_123_456_701)","let w = BInt(0b10010101_01010101_01010101_01010010_10101000_01010111_11100101_01010101_01001010_10101010)","","\/\/ From a floating point value","let x = BInt(1.12345e30) \/\/ x = 1123450000000000064996914495488","","\/\/ From string literals","let b = BInt(\"123456789012345678901234567890\")!","let c = BInt(\"1234567890abcdef1234567890abcdef\", radix: 16)!","","\/\/ From magnitude and sign","let m: Limbs = [1, 2, 3]","let d = BInt(m) \/\/ d = 1020847100762815390427017310442723737601","let e = BInt(m, true) \/\/ e = -1020847100762815390427017310442723737601","","\/\/ From a big-endian 2's complement byte array","let f = BInt(signed: [255, 255, 127]) \/\/ f = -129","","\/\/ From a big-endian magnitude byte array","let g = BInt(magnitude: [255, 255, 127]) \/\/ g = 16777087","","\/\/ Random value with specified bitwidth","let h = BInt(bitWidth: 43) \/\/ For example h = 3965245974702 (=0b111001101100111011000100111110100010101110)","","\/\/ Random value less than a given value","let i = h.randomLessThan() \/\/ For example i = 583464003284"],"syntax":"swift"},{"type":"heading","level":3,"anchor":"Converting-BInts","text":"Converting BInt’s"},{"type":"codeListing","syntax":"swift","code":["let x = BInt(16777087)","","\/\/ To double","let d = x.asDouble() \/\/ d = 16777087.0","","\/\/ To strings","let s1 = x.asString() \/\/ s1 = \"16777087\"","let s2 = x.asString(radix: 16) \/\/ s2 = \"ffff7f\"","","\/\/ To big-endian magnitude byte array","let b1 = x.asMagnitudeBytes() \/\/ b1 = [255, 255, 127]","","\/\/ To big-endian 2's complement byte array","let b2 = x.asSignedBytes() \/\/ b2 = [0, 255, 255, 127]"]},{"text":"Operations","type":"heading","anchor":"Operations","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The operations available to "},{"type":"codeVoice","code":"BInt"},{"text":" are:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Arithmetic:","type":"text"}]},{"text":" addition, subtraction, multiplication, division, exponentiation, remainder and modulus, gcd and lcm","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Comparison:"}]},{"text":" the six standard operations ==  !=  <  <=  >  >=","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Shift Operations:"}]},{"type":"text","text":" logical left- and right shifts"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Bit Operations:"}],"type":"strong"},{"type":"text","text":" logical and, or, xor, not, bit manipulation"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Root Extraction:"}]},{"type":"text","text":" sqrt, sqrtMod, sqrtRemainder, isPerfectSquare, root, rootRemainder, isPerfectRoot"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Prime Number:"}]},{"type":"text","text":" probablePrime, nextPrime, isProbablyPrime, primorial"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Miscellaneous:","type":"text"}]},{"text":" randomLessThan, binomial, factorial, fibonacci, jacobiSymbol, kroneckerSymbol, lucas","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"identifier":{"url":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","interfaceLanguage":"swift"},"references":{"doc://bigint.BigInt/documentation/BigInt/Algorithms":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Some of the algorithms used in BigInt are described below"}],"url":"\/documentation\/bigint\/algorithms","title":"Algorithms","kind":"article","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms"},"doc://bigint.BigInt/documentation/BigInt/Performance":{"role":"article","title":"Performance","kind":"article","type":"topic","abstract":[{"type":"text","text":"Execution times for certain BigInt operations"}],"url":"\/documentation\/bigint\/performance","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance"},"doc://bigint.BigInt/documentation/BigInt/References":{"title":"References","type":"topic","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"url":"\/documentation\/bigint\/references","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","role":"article","kind":"article"},"doc://bigint.BigInt/documentation/BigInt/AboutBFraction":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Signed fractions with numerator and denominator of unbounded size"}],"url":"\/documentation\/bigint\/aboutbfraction","title":"About BFraction","kind":"article","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction"},"doc://bigint.BigInt/documentation/BigInt/Protocols":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols","kind":"article","type":"topic","role":"article","title":"Protocols and Additions","abstract":[{"type":"text","text":"BigInt supports the standard integer data type’s SignedInteger, BinaryInteger, Codable, and Numeric protocols."}],"url":"\/documentation\/bigint\/protocols"},"doc://bigint.BigInt/documentation/BigInt":{"title":"BigInt","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt","url":"\/documentation\/bigint","type":"topic","kind":"symbol","abstract":[{"text":"Signed integers and fractions of unbounded size","type":"text"}],"role":"collection"},"doc://bigint.BigInt/documentation/BigInt/AboutCRT":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","kind":"article","abstract":[{"type":"text","text":"Chinese Remainder Theorem"}],"title":"About CRT","url":"\/documentation\/bigint\/aboutcrt","role":"article","type":"topic"},"doc://bigint.BigInt/documentation/BigInt/BInt":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BInt"}],"navigatorTitle":[{"text":"BInt","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/BInt","abstract":[{"type":"text","text":"The BInt structure"}],"role":"symbol","title":"BInt","url":"\/documentation\/bigint\/bint"}}}