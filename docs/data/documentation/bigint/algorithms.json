{"sections":[],"hierarchy":{"paths":[["doc:\/\/bigint.BigInt\/documentation\/BigInt"]]},"abstract":[{"type":"text","text":"Some of the algorithms used in BigInt are described below"}],"primaryContentSections":[{"content":[{"type":"heading","text":"","anchor":"","level":2},{"type":"heading","text":"Multiplication","anchor":"Multiplication","level":3},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Schonhage-Strassen FFT based algorithm for numbers with more than 384.000 bits"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"ToomCook-3 algorithm for numbers with more than 12.800 bits"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Karatsuba algorithm for numbers with more than 6.400 bits","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Basecase - Knuth algorithm M","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","text":"Division and Remainder","level":3,"anchor":"Division-and-Remainder"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Burnikel-Ziegler algorithm for divisors with more than 3.840 bits provided the dividend has at least 3.840 bits more than the divisor"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Basecase - Knuth algorithm D","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exact Division - Jebelean’s exact division algorithm"}]}]}]},{"level":3,"type":"heading","text":"Greatest Common Divisor","anchor":"Greatest-Common-Divisor"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 128.000 bits"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 for smaller numbers, with binary GCD basecase"}],"type":"paragraph"}]}]},{"level":3,"text":"Extended Greatest Common Divisor","type":"heading","anchor":"Extended-Greatest-Common-Divisor"},{"items":[{"content":[{"inlineContent":[{"text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 64.000 bits, with extra logic to track cofactors","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 and exercise 18 for smaller numbers"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"text":"Modular Exponentiation","type":"heading","anchor":"Modular-Exponentiation"},{"inlineContent":[{"text":"Sliding window algorithm 14.85 from [HANDBOOK] using Barrett reduction for exponents with fewer than 2.048 bits","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and Montgomery reduction for larger exponents"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"Inverse-Modulus","text":"Inverse Modulus"},{"inlineContent":[{"text":"If the modulus is a (not too large) power of 2, the algorithm from [KOC] section 7,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"else it is computed via the extended GCD algorithm"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Square Root","anchor":"Square-Root"},{"inlineContent":[{"type":"text","text":"Algorithm 1.12 (SqrtRem) from [BRENT] with algorithm 9.2.11 from [CRANDALL] as basecase"}],"type":"paragraph"},{"anchor":"Square-Root-Modulo-a-Prime-Number","level":3,"text":"Square Root Modulo a Prime Number","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Algorithm 2.3.8 from [CRANDALL]","type":"text"}]},{"anchor":"Random-Numbers","text":"Random Numbers","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Random BInt numbers are generated using the cryptographically secure function "},{"type":"codeVoice","code":"SecRandomCopyBytes"}]},{"type":"heading","anchor":"Prime-Number-Test","text":"Prime Number Test","level":3},{"inlineContent":[{"text":"Miller-Rabin test","type":"text"}],"type":"paragraph"},{"text":"Prime Number Generation","level":3,"type":"heading","anchor":"Prime-Number-Generation"},{"inlineContent":[{"text":"The algorithm from Java BigInteger translated to Swift","type":"text"}],"type":"paragraph"},{"text":"Factorial","level":3,"anchor":"Factorial","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"code":"SplitRecursive","type":"codeVoice"},{"type":"text","text":" algorithm from Peter Luschny: "},{"identifier":"https:\/\/www.luschny.de","isActive":true,"type":"reference"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Fibonacci","text":"Fibonacci"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"fastDoubling"},{"text":" algorithm from Project Nayuki: ","type":"text"},{"identifier":"https:\/\/www.nayuki.io","isActive":true,"type":"reference"}],"type":"paragraph"},{"text":"Jacobi and Kronecker symbols","type":"heading","level":3,"anchor":"Jacobi-and-Kronecker-symbols"},{"type":"paragraph","inlineContent":[{"text":"Algorithm 2.3.5 from [CRANDALL]","type":"text"}]},{"level":3,"text":"Bernoulli Numbers","type":"heading","anchor":"Bernoulli-Numbers"},{"inlineContent":[{"text":"Computed via Tangent numbers which is fast because it only involves integer arithmetic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but no fraction arithmetic"}],"type":"paragraph"},{"text":"Chinese Remainder Theorem","type":"heading","level":3,"anchor":"Chinese-Remainder-Theorem"},{"type":"paragraph","inlineContent":[{"text":"The Garner algorithm 2.1.7 from [CRANDALL]","type":"text"}]}],"kind":"content"}],"kind":"article","seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols"],"generated":true,"anchor":"Articles"}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"BigInt"}],"title":"Algorithms"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bigint\/algorithms"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://bigint.BigInt/documentation/BigInt/Performance":{"kind":"article","url":"\/documentation\/bigint\/performance","type":"topic","role":"article","abstract":[{"text":"Execution times for certain BigInt operations","type":"text"}],"title":"Performance","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance"},"doc://bigint.BigInt/documentation/BigInt":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt","url":"\/documentation\/bigint","type":"topic","title":"BigInt","role":"collection","abstract":[{"text":"Signed integers and fractions of unbounded size","type":"text"}],"kind":"symbol"},"doc://bigint.BigInt/documentation/BigInt/AboutBFraction":{"kind":"article","role":"article","title":"About BFraction","abstract":[{"type":"text","text":"Signed fractions with numerator and denominator of unbounded size"}],"type":"topic","url":"\/documentation\/bigint\/aboutbfraction","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction"},"doc://bigint.BigInt/documentation/BigInt/AboutBInt":{"type":"topic","url":"\/documentation\/bigint\/aboutbint","role":"article","kind":"article","title":"About BInt","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","abstract":[{"text":"Signed integers of unbounded size","type":"text"}]},"doc://bigint.BigInt/documentation/BigInt/Protocols":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols","url":"\/documentation\/bigint\/protocols","type":"topic","role":"article","abstract":[{"text":"BigInt supports Apple’s ","type":"text"},{"type":"codeVoice","code":"SignedInteger"},{"text":", ","type":"text"},{"type":"codeVoice","code":"BinaryInteger"},{"text":", ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Numeric"},{"type":"text","text":" protocols."}],"title":"Protocols and Additions","kind":"article"},"doc://bigint.BigInt/documentation/BigInt/References":{"kind":"article","url":"\/documentation\/bigint\/references","type":"topic","role":"article","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}],"title":"References","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/References"},"doc://bigint.BigInt/documentation/BigInt/AboutCRT":{"type":"topic","abstract":[{"type":"text","text":"Chinese Remainder Theorem"}],"role":"article","title":"About CRT","url":"\/documentation\/bigint\/aboutcrt","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","kind":"article"},"https://www.nayuki.io":{"titleInlineContent":[{"type":"text","text":"https:\/\/www.nayuki.io"}],"url":"https:\/\/www.nayuki.io","type":"link","identifier":"https:\/\/www.nayuki.io","title":"https:\/\/www.nayuki.io"},"https://www.luschny.de":{"titleInlineContent":[{"type":"text","text":"https:\/\/www.luschny.de"}],"url":"https:\/\/www.luschny.de","type":"link","identifier":"https:\/\/www.luschny.de","title":"https:\/\/www.luschny.de"}}}