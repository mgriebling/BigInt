{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms"},"kind":"article","hierarchy":{"paths":[["doc:\/\/bigint.BigInt\/documentation\/BigInt"]]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols"],"title":"Articles","anchor":"Articles"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"","anchor":""},{"type":"heading","text":"Multiplication","level":3,"anchor":"Multiplication"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Schonhage-Strassen FFT based algorithm for numbers with more than 384.000 bits"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"ToomCook-3 algorithm for numbers with more than 12.800 bits","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Karatsuba algorithm for numbers with more than 6.400 bits"}]}]},{"content":[{"inlineContent":[{"text":"Basecase - Knuth algorithm M","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Division-and-Remainder","level":3,"type":"heading","text":"Division and Remainder"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Burnikel-Ziegler algorithm for divisors with more than 3.840 bits provided the dividend has at least 3.840 bits more than the divisor","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Basecase - Knuth algorithm D","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Exact Division - Jebelean’s exact division algorithm","type":"text"}],"type":"paragraph"}]}]},{"type":"heading","level":3,"text":"Greatest Common Divisor","anchor":"Greatest-Common-Divisor"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 128.000 bits","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 for smaller numbers, with binary GCD basecase"}],"type":"paragraph"}]}]},{"type":"heading","text":"Extended Greatest Common Divisor","anchor":"Extended-Greatest-Common-Divisor","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 64.000 bits, with extra logic to track cofactors"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 and exercise 18 for smaller numbers"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","level":3,"text":"Modular Exponentiation","anchor":"Modular-Exponentiation"},{"type":"paragraph","inlineContent":[{"text":"Sliding window algorithm 14.85 from [HANDBOOK] using Barrett reduction for exponents with fewer than 2.048 bits","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and Montgomery reduction for larger exponents"}]},{"anchor":"Inverse-Modulus","level":3,"text":"Inverse Modulus","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the modulus is a (not too large) power of 2, the algorithm from [KOC] section 7,"},{"text":" ","type":"text"},{"text":"else it is computed via the extended GCD algorithm","type":"text"}]},{"level":3,"type":"heading","text":"Square Root","anchor":"Square-Root"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Algorithm 1.12 (SqrtRem) from [BRENT] with algorithm 9.2.11 from [CRANDALL] as basecase"}]},{"text":"Square Root Modulo a Prime Number","type":"heading","level":3,"anchor":"Square-Root-Modulo-a-Prime-Number"},{"type":"paragraph","inlineContent":[{"text":"Algorithm 2.3.8 from [CRANDALL]","type":"text"}]},{"type":"heading","level":3,"text":"Random Numbers","anchor":"Random-Numbers"},{"inlineContent":[{"text":"Random BInt numbers are generated using the cryptographically secure function ","type":"text"},{"code":"SecRandomCopyBytes","type":"codeVoice"}],"type":"paragraph"},{"text":"Prime Number Test","anchor":"Prime-Number-Test","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Miller-Rabin test","type":"text"}]},{"level":3,"text":"Prime Number Generation","type":"heading","anchor":"Prime-Number-Generation"},{"type":"paragraph","inlineContent":[{"text":"The algorithm from Java BigInteger translated to Swift","type":"text"}]},{"level":3,"anchor":"Factorial","type":"heading","text":"Factorial"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"SplitRecursive"},{"text":" algorithm from Peter Luschny: ","type":"text"},{"type":"reference","identifier":"https:\/\/www.luschny.de","isActive":true}]},{"type":"heading","text":"Fibonacci","anchor":"Fibonacci","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"fastDoubling","type":"codeVoice"},{"text":" algorithm from Project Nayuki: ","type":"text"},{"type":"reference","identifier":"https:\/\/www.nayuki.io","isActive":true}]},{"text":"Jacobi and Kronecker symbols","level":3,"type":"heading","anchor":"Jacobi-and-Kronecker-symbols"},{"type":"paragraph","inlineContent":[{"text":"Algorithm 2.3.5 from [CRANDALL]","type":"text"}]},{"level":3,"type":"heading","anchor":"Bernoulli-Numbers","text":"Bernoulli Numbers"},{"inlineContent":[{"text":"Computed via Tangent numbers which is fast because it only involves integer arithmetic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but no fraction arithmetic"}],"type":"paragraph"},{"level":3,"text":"Chinese Remainder Theorem","anchor":"Chinese-Remainder-Theorem","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The Garner algorithm 2.1.7 from [CRANDALL]","type":"text"}]}]}],"variants":[{"paths":["\/documentation\/bigint\/algorithms"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"text":"Some of the algorithms used in BigInt are described below","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"modules":[{"name":"BigInt"}],"role":"article","roleHeading":"Article","title":"Algorithms"},"references":{"https://www.luschny.de":{"titleInlineContent":[{"type":"text","text":"https:\/\/www.luschny.de"}],"type":"link","title":"https:\/\/www.luschny.de","identifier":"https:\/\/www.luschny.de","url":"https:\/\/www.luschny.de"},"doc://bigint.BigInt/documentation/BigInt":{"title":"BigInt","abstract":[{"text":"Signed integers and fractions of unbounded size","type":"text"}],"kind":"symbol","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt","role":"collection","type":"topic","url":"\/documentation\/bigint"},"doc://bigint.BigInt/documentation/BigInt/AboutBInt":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","kind":"article","type":"topic","url":"\/documentation\/bigint\/aboutbint","title":"About BInt","role":"article","abstract":[{"type":"text","text":"Signed integers of unbounded size"}]},"doc://bigint.BigInt/documentation/BigInt/AboutBFraction":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","url":"\/documentation\/bigint\/aboutbfraction","type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"Signed fractions with numerator and denominator of unbounded size"}],"title":"About BFraction"},"doc://bigint.BigInt/documentation/BigInt/AboutCRT":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","kind":"article","type":"topic","url":"\/documentation\/bigint\/aboutcrt","title":"About CRT","role":"article","abstract":[{"type":"text","text":"Chinese Remainder Theorem"}]},"doc://bigint.BigInt/documentation/BigInt/Protocols":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols","url":"\/documentation\/bigint\/protocols","type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"BigInt supports Apple’s "},{"type":"codeVoice","code":"SignedInteger"},{"text":", ","type":"text"},{"type":"codeVoice","code":"BinaryInteger"},{"type":"text","text":", "},{"type":"codeVoice","code":"Codable"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Numeric"},{"text":" protocols.","type":"text"}],"title":"Protocols and Additions"},"doc://bigint.BigInt/documentation/BigInt/References":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","kind":"article","type":"topic","url":"\/documentation\/bigint\/references","title":"References","role":"article","abstract":[{"text":"Algorithms from the following books and papers have been used in the implementation","type":"text"}]},"doc://bigint.BigInt/documentation/BigInt/Performance":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","url":"\/documentation\/bigint\/performance","type":"topic","role":"article","kind":"article","abstract":[{"text":"Execution times for certain BigInt operations","type":"text"}],"title":"Performance"},"https://www.nayuki.io":{"titleInlineContent":[{"type":"text","text":"https:\/\/www.nayuki.io"}],"type":"link","identifier":"https:\/\/www.nayuki.io","title":"https:\/\/www.nayuki.io","url":"https:\/\/www.nayuki.io"}}}