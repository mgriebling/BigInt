{"sections":[],"primaryContentSections":[{"content":[{"anchor":"","type":"heading","text":"","level":2},{"type":"heading","level":3,"anchor":"Multiplication","text":"Multiplication"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Schonhage-Strassen FFT based algorithm for numbers with more than 384,000 bits","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ToomCook-3 algorithm for numbers with more than 12,800 bits"}]}]},{"content":[{"inlineContent":[{"text":"Karatsuba algorithm for numbers with more than 6,400 bits","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Basecase - Knuth algorithm M","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","anchor":"Division-and-Remainder","text":"Division and Remainder","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Burnikel-Ziegler algorithm for divisors with more than 3,840 bits provided the dividend has at least 3,840 bits more than the divisor"}]}]},{"content":[{"inlineContent":[{"text":"Basecase - Knuth algorithm D","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Exact Division - Jebelean’s exact division algorithm"}]}]}],"type":"unorderedList"},{"anchor":"Greatest-Common-Divisor","level":3,"type":"heading","text":"Greatest Common Divisor"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 128,000 bits"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 for smaller numbers, with binary GCD basecase","type":"text"}]}]}]},{"level":3,"anchor":"Extended-Greatest-Common-Divisor","type":"heading","text":"Extended Greatest Common Divisor"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 64,000 bits, with extra logic to track cofactors","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 and exercise 18 for smaller numbers"}]}]}]},{"level":3,"text":"Modular Exponentiation","type":"heading","anchor":"Modular-Exponentiation"},{"inlineContent":[{"text":"Sliding window algorithm 14.85 from [HANDBOOK] using Barrett reduction for exponents with fewer than 2,048 bits","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and Montgomery reduction for larger exponents"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"Inverse-Modulus","text":"Inverse Modulus"},{"inlineContent":[{"type":"text","text":"If the modulus is a (not too large) power of 2, the algorithm from [KOC] section 7,"},{"type":"text","text":" "},{"type":"text","text":"else it is computed via the extended GCD algorithm"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Square Root","anchor":"Square-Root"},{"inlineContent":[{"text":"Algorithm 1.12 (SqrtRem) from [BRENT] with algorithm 9.2.11 from [CRANDALL] as basecase","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Square-Root-Modulo-a-Prime-Number","text":"Square Root Modulo a Prime Number"},{"inlineContent":[{"type":"text","text":"Algorithm 2.3.8 from [CRANDALL]"}],"type":"paragraph"},{"anchor":"Random-Numbers","text":"Random Numbers","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Random BInt numbers are generated using the cryptographically secure function "},{"type":"codeVoice","code":"SecRandomCopyBytes"}]},{"level":3,"text":"Prime Number Test","anchor":"Prime-Number-Test","type":"heading"},{"inlineContent":[{"type":"text","text":"Miller-Rabin test"}],"type":"paragraph"},{"anchor":"Prime-Number-Generation","level":3,"type":"heading","text":"Prime Number Generation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The algorithm from Java BigInteger translated to Swift"}]},{"text":"Factorial","level":3,"type":"heading","anchor":"Factorial"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"SplitRecursive"},{"text":" algorithm from Peter Luschny: ","type":"text"},{"identifier":"https:\/\/www.luschny.de","type":"reference","isActive":true}],"type":"paragraph"},{"type":"heading","anchor":"Fibonacci","level":3,"text":"Fibonacci"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"fastDoubling","type":"codeVoice"},{"text":" algorithm from Project Nayuki: ","type":"text"},{"type":"reference","identifier":"https:\/\/www.nayuki.io","isActive":true}],"type":"paragraph"},{"type":"heading","level":3,"text":"Jacobi and Kronecker symbols","anchor":"Jacobi-and-Kronecker-symbols"},{"inlineContent":[{"type":"text","text":"Algorithm 2.3.5 from [CRANDALL]"}],"type":"paragraph"},{"level":3,"anchor":"Bernoulli-Numbers","type":"heading","text":"Bernoulli Numbers"},{"inlineContent":[{"type":"text","text":"Computed via Tangent numbers which is fast because it only involves integer arithmetic"},{"text":" ","type":"text"},{"type":"text","text":"but no fraction arithmetic"}],"type":"paragraph"},{"anchor":"Chinese-Remainder-Theorem","type":"heading","level":3,"text":"Chinese Remainder Theorem"},{"type":"paragraph","inlineContent":[{"text":"The Garner algorithm 2.1.7 from [CRANDALL]","type":"text"}]}],"kind":"content"}],"kind":"article","abstract":[{"text":"Some of the algorithms used in BigInt are described below","type":"text"}],"identifier":{"url":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols"],"generated":true,"anchor":"Articles"}],"hierarchy":{"paths":[["doc:\/\/bigint.BigInt\/documentation\/BigInt"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/bigint\/algorithms"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Article","modules":[{"name":"BigInt"}],"title":"Algorithms","role":"article"},"references":{"doc://bigint.BigInt/documentation/BigInt/AboutBInt":{"abstract":[{"type":"text","text":"Signed integers of unbounded size"}],"type":"topic","kind":"article","url":"\/documentation\/bigint\/aboutbint","role":"article","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","title":"About BInt"},"https://www.luschny.de":{"type":"link","title":"https:\/\/www.luschny.de","titleInlineContent":[{"type":"text","text":"https:\/\/www.luschny.de"}],"identifier":"https:\/\/www.luschny.de","url":"https:\/\/www.luschny.de"},"doc://bigint.BigInt/documentation/BigInt/References":{"title":"References","type":"topic","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"url":"\/documentation\/bigint\/references","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","role":"article","kind":"article"},"doc://bigint.BigInt/documentation/BigInt/AboutBFraction":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Signed fractions with numerator and denominator of unbounded size"}],"url":"\/documentation\/bigint\/aboutbfraction","title":"About BFraction","kind":"article","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction"},"doc://bigint.BigInt/documentation/BigInt":{"title":"BigInt","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt","url":"\/documentation\/bigint","type":"topic","kind":"symbol","abstract":[{"text":"Signed integers and fractions of unbounded size","type":"text"}],"role":"collection"},"doc://bigint.BigInt/documentation/BigInt/Protocols":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols","kind":"article","type":"topic","role":"article","title":"Protocols and Additions","abstract":[{"type":"text","text":"BigInt supports the standard integer data type’s SignedInteger, BinaryInteger, Codable, and Numeric protocols."}],"url":"\/documentation\/bigint\/protocols"},"https://www.nayuki.io":{"type":"link","title":"https:\/\/www.nayuki.io","titleInlineContent":[{"text":"https:\/\/www.nayuki.io","type":"text"}],"identifier":"https:\/\/www.nayuki.io","url":"https:\/\/www.nayuki.io"},"doc://bigint.BigInt/documentation/BigInt/AboutCRT":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","kind":"article","abstract":[{"type":"text","text":"Chinese Remainder Theorem"}],"title":"About CRT","url":"\/documentation\/bigint\/aboutcrt","role":"article","type":"topic"},"doc://bigint.BigInt/documentation/BigInt/Performance":{"role":"article","title":"Performance","kind":"article","type":"topic","abstract":[{"type":"text","text":"Execution times for certain BigInt operations"}],"url":"\/documentation\/bigint\/performance","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance"}}}