{"primaryContentSections":[{"content":[{"text":"","level":2,"anchor":"","type":"heading"},{"type":"heading","level":3,"text":"Multiplication","anchor":"Multiplication"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Schonhage-Strassen FFT based algorithm for numbers with more than 384.000 bits"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ToomCook-3 algorithm for numbers with more than 12.800 bits"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Karatsuba algorithm for numbers with more than 6.400 bits"}]}]},{"content":[{"inlineContent":[{"text":"Basecase - Knuth algorithm M","type":"text"}],"type":"paragraph"}]}]},{"level":3,"anchor":"Division-and-Remainder","text":"Division and Remainder","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Burnikel-Ziegler algorithm for divisors with more than 3.840 bits provided the dividend has at least 3.840 bits more than the divisor"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Basecase - Knuth algorithm D","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Exact Division - Jebelean’s exact division algorithm","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","text":"Greatest Common Divisor","anchor":"Greatest-Common-Divisor","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 128.000 bits","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 for smaller numbers, with binary GCD basecase"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Extended-Greatest-Common-Divisor","type":"heading","level":3,"text":"Extended Greatest Common Divisor"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Recursive GCD algorithm 9.4.6 from [CRANDALL] for numbers with more than 64.000 bits, with extra logic to track cofactors"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Lehmer’s algorithm [KNUTH] chapter 4.5.2 and exercise 18 for smaller numbers","type":"text"}]}]}]},{"anchor":"Modular-Exponentiation","text":"Modular Exponentiation","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Sliding window algorithm 14.85 from [HANDBOOK] using Barrett reduction for exponents with fewer than 2.048 bits"},{"text":" ","type":"text"},{"text":"and Montgomery reduction for larger exponents","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Inverse Modulus","anchor":"Inverse-Modulus","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the modulus is a (not too large) power of 2, the algorithm from [KOC] section 7,"},{"type":"text","text":" "},{"text":"else it is computed via the extended GCD algorithm","type":"text"}]},{"text":"Square Root","anchor":"Square-Root","type":"heading","level":3},{"inlineContent":[{"text":"Algorithm 1.12 (SqrtRem) from [BRENT] with algorithm 9.2.11 from [CRANDALL] as basecase","type":"text"}],"type":"paragraph"},{"text":"Square Root Modulo a Prime Number","anchor":"Square-Root-Modulo-a-Prime-Number","level":3,"type":"heading"},{"inlineContent":[{"text":"Algorithm 2.3.8 from [CRANDALL]","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Random-Numbers","type":"heading","text":"Random Numbers"},{"inlineContent":[{"type":"text","text":"Random BInt numbers are generated using the cryptographically secure function "},{"type":"codeVoice","code":"SecRandomCopyBytes"}],"type":"paragraph"},{"anchor":"Prime-Number-Test","type":"heading","text":"Prime Number Test","level":3},{"type":"paragraph","inlineContent":[{"text":"Miller-Rabin test","type":"text"}]},{"text":"Prime Number Generation","type":"heading","anchor":"Prime-Number-Generation","level":3},{"type":"paragraph","inlineContent":[{"text":"The algorithm from Java BigInteger translated to Swift","type":"text"}]},{"level":3,"text":"Factorial","type":"heading","anchor":"Factorial"},{"inlineContent":[{"type":"text","text":"The "},{"code":"SplitRecursive","type":"codeVoice"},{"type":"text","text":" algorithm from Peter Luschny: "},{"type":"reference","identifier":"https:\/\/www.luschny.de","isActive":true}],"type":"paragraph"},{"type":"heading","text":"Fibonacci","level":3,"anchor":"Fibonacci"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"fastDoubling","type":"codeVoice"},{"type":"text","text":" algorithm from Project Nayuki: "},{"isActive":true,"identifier":"https:\/\/www.nayuki.io","type":"reference"}]},{"anchor":"Jacobi-and-Kronecker-symbols","type":"heading","level":3,"text":"Jacobi and Kronecker symbols"},{"inlineContent":[{"type":"text","text":"Algorithm 2.3.5 from [CRANDALL]"}],"type":"paragraph"},{"type":"heading","text":"Bernoulli Numbers","anchor":"Bernoulli-Numbers","level":3},{"inlineContent":[{"type":"text","text":"Computed via Tangent numbers which is fast because it only involves integer arithmetic"},{"type":"text","text":" "},{"type":"text","text":"but no fraction arithmetic"}],"type":"paragraph"},{"type":"heading","anchor":"Chinese-Remainder-Theorem","text":"Chinese Remainder Theorem","level":3},{"inlineContent":[{"type":"text","text":"The Garner algorithm 2.1.7 from [CRANDALL]"}],"type":"paragraph"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bigint\/algorithms"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Algorithms"},"metadata":{"modules":[{"name":"BigInt"}],"title":"Algorithms","roleHeading":"Article","role":"article"},"abstract":[{"text":"Some of the algorithms used in BigInt are described below","type":"text"}],"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols"],"anchor":"Articles"}],"hierarchy":{"paths":[["doc:\/\/bigint.BigInt\/documentation\/BigInt"]]},"kind":"article","sections":[],"references":{"https://www.luschny.de":{"type":"link","identifier":"https:\/\/www.luschny.de","title":"https:\/\/www.luschny.de","url":"https:\/\/www.luschny.de","titleInlineContent":[{"text":"https:\/\/www.luschny.de","type":"text"}]},"doc://bigint.BigInt/documentation/BigInt/Performance":{"type":"topic","title":"Performance","abstract":[{"type":"text","text":"Execution times for certain BigInt operations"}],"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Performance","kind":"article","url":"\/documentation\/bigint\/performance","role":"article"},"https://www.nayuki.io":{"titleInlineContent":[{"type":"text","text":"https:\/\/www.nayuki.io"}],"title":"https:\/\/www.nayuki.io","url":"https:\/\/www.nayuki.io","type":"link","identifier":"https:\/\/www.nayuki.io"},"doc://bigint.BigInt/documentation/BigInt/AboutBFraction":{"type":"topic","abstract":[{"type":"text","text":"Signed fractions with numerator and denominator of unbounded size"}],"title":"About BFraction","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBFraction","kind":"article","url":"\/documentation\/bigint\/aboutbfraction","role":"article"},"doc://bigint.BigInt/documentation/BigInt/References":{"type":"topic","title":"References","url":"\/documentation\/bigint\/references","abstract":[{"type":"text","text":"Algorithms from the following books and papers have been used in the implementation"}],"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/References","role":"article","kind":"article"},"doc://bigint.BigInt/documentation/BigInt/Protocols":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/Protocols","title":"Protocols","type":"topic","kind":"article","url":"\/documentation\/bigint\/protocols","role":"article","abstract":[{"text":"BigInt supports Apple’s ","type":"text"},{"type":"codeVoice","code":"SignedInteger"},{"text":", ","type":"text"},{"code":"BinaryInteger","type":"codeVoice"},{"type":"text","text":", "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Numeric"},{"text":" protocols.","type":"text"}]},"doc://bigint.BigInt/documentation/BigInt":{"role":"collection","kind":"symbol","title":"BigInt","abstract":[{"text":"Signed integers and fractions of unbounded size","type":"text"}],"type":"topic","url":"\/documentation\/bigint","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt"},"doc://bigint.BigInt/documentation/BigInt/AboutBInt":{"identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutBInt","url":"\/documentation\/bigint\/aboutbint","title":"About BInt","type":"topic","role":"article","abstract":[{"type":"text","text":"Signed integers of unbounded size"}],"kind":"article"},"doc://bigint.BigInt/documentation/BigInt/AboutCRT":{"kind":"article","role":"article","type":"topic","identifier":"doc:\/\/bigint.BigInt\/documentation\/BigInt\/AboutCRT","title":"About CRT","url":"\/documentation\/bigint\/aboutcrt","abstract":[{"type":"text","text":"Chinese Remainder Theorem"}]}}}